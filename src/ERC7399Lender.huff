/// @author Michael Amadi `https://github.com/AmadiMichaels`
/// @dev Minimal {ERC7399} Huff contract that allows flash lending of a single asset for a fixed fee.


/// @notice Imports
#include "./lib/Errors.huff"
#include "huffmate/utils/SafeTransferLib.huff"
#include "huff-console/Console.huff"
#include "huffmate/utils/Constants.huff"


/// @notice INTERFACE
#define function maxFlashLoan(address asset_) view returns(uint256)
#define function flashFee(address asset_, uint256 amount) view returns(uint256)
// #define function flash(address loanReceiver, address asset_, uint256 amount, bytes calldata data, function callback) nonpayable returns(bytes memory)
#define function sync() nonpayable returns()
#define function defund() nonpayable returns()



/// @notice EVENTS
#define event Flash(address indexed asset, uint256 amount, uint256 fee)
#define event Sync()
#define event Defund()



/// @notice STORAGE SLOTS
#define constant RESERVES = FREE_STORAGE_POINTER()

// Wrapper huff contract requirements
// #define constant OWNER = 0x...
// #define constant ASSET = 0x...
// #define constant FEE = 0x...



/// @notice CONSTANTS
#define constant TEN_THOUSAND = 0x2710
#define constant FLASH_FUNC_SIG = 0x40a08f10 // flash(address loanReceiver, address asset_, uint256 amount, bytes calldata data, function callback) nonpayable returns(bytes memory)



/// @notice ENTRY POINT
#define macro MAIN() = {
    0x00 calldataload 0xe0 shr                                                                      // [func_sig]

    dup1 [FLASH_FUNC_SIG] eq flash_jumpdest jumpi                                                   // [func_sig]
    dup1 __FUNC_SIG(maxFlashLoan) eq maxFlashLoan_jumpdest jumpi                                    // [func_sig]
    dup1 __FUNC_SIG(flashFee) eq flashFee_jumpdest jumpi                                            // [func_sig]
    dup1 __FUNC_SIG(sync) eq sync_jumpdest jumpi                                                    // [func_sig]
    dup1 __FUNC_SIG(defund) eq defund_jumpdest jumpi                                                // [func_sig]

    0x00 0x00 revert


    flash_jumpdest:
        FLASH()
    
    maxFlashLoan_jumpdest:
        MAX_FLASHLOAN()

    flashFee_jumpdest:
        FLASH_FEE()

    sync_jumpdest:
        SYNC()

    defund_jumpdest:
        DEFUND()
}



/// @notice sync balance of  address(this) with reserves
/**
 * function sync() external
 *
 * Input data expected
 * 0x00 - 0x04: 0x........
 */
#define macro SYNC() = {
    // update reserves
    GET_ASSET_BALANCE_OF_THIS()                                                                     // [balance]
    [RESERVES] sstore                                                                               // []

    // emit sync
    __EVENT_HASH(Sync)                                                                              // [topic1]
    0x00 0x00                                                                                       // [offset, length, topic1]
    log1                                                                                            // []

    stop
}



/// @notice withdraw
/**
 * function defund() external
 *
 * Input data expected
 * 0x00 - 0x04: 0x........
 */
#define macro DEFUND() = {
    // only owner can call
    ONLY_OWNER()                                                                                    // []
    
    // set reserves to 0
    0x00 [RESERVES] sstore                                                                          // []

    // withdraw funds
    [ASSET]                                                                                         // [asset]
    GET_ASSET_BALANCE_OF_THIS()                                                                     // [amount, asset]
    [OWNER]                                                                                         // [to, amount, asset]
    SAFE_TRANSFER(0x00)                                                                             // []


    // emit defund
    __EVENT_HASH(Defund)                                                                            // [topic1]
    0x00 0x00                                                                                       // [offset, length, topic1]
    log1                                                                                            // []

    stop
}



/// @notice Flash function implementation
/**
 * function flash(address loanReceiver, address asset_, uint256 amount, bytes calldata data, function(address, address, address, uint256, uint256, bytes memory) external returns (bytes memory) callback) external returns(bytes memory)
 *
 * Input data expected
 * 0x00 - 0x04: 0x........
 * 0x04 - 0x24: address loanReceiver
 * 0x24 - 0x44: address asset_
 * 0x44 - 0x64: amount
 * 0x64 - 0x84: offset to `bytes calldata data`
 * 0x84 - 0xa4: function(address, address, address, uint256, uint256, bytes memory) external returns (bytes memory) callback
 * 0xa4 - 0xc4: length of `bytes calldata data`
 * 0xc4 - 0xe4: start of `bytes calldata data`
 */
#define macro FLASH() = {
    // confirm that asset_ is supported
    0x24 calldataload                                                                               // [asset_]
    IS_SUPPORTED()                                                                                  // [asset_]

    // get flash fee
    0x44 calldataload                                                                               // [amount, asset_]
    dup1                                                                                            // [amount, amount, asset_]
    _FLASH_FEE()                                                                                    // [flash_fee, amount, asset_]

    // serve loan
    0x04 calldataload                                                                               // [loanReceiver, flash_fee, amount, asset_]
    dup3                                                                                            // [amount, loanReceiver, flash_fee, amount, asset_]
    _SERVE_LOAN()                                                                                   // [flash_fee, amount, asset_]


    /// make callback
    /**
     * function type layout (basically a bytes24)
     * 0x84 - 0x98: address to callback to
     * 0x98 - 0x9c: function signature to call
     * 0x9c - 0xa4: 0x0000000000000000
     */
    0x84 calldataload                                                                               // [function_type_encoded, flash_fee, amount, asset_]

    // get address
    dup1 0x60 shr                                                                                   // [callback_address, function_type_encoded, flash_fee, amount, asset_]

    // get function sig
    swap1                                                                                           // [function_type_encoded, callback_address, flash_fee, amount, asset_]
    0x40 shr                                                                                        // [shr(0x10, function_type_encoded), callback_address, flash_fee, amount, asset_]

    [__UINT32_MAX] and                                                                              // [callback_function_sig, callback_address, flash_fee, amount, asset_]
    0xe0 shl                                                                                        // [callback_function_sig, callback_address, flash_fee, amount, asset_]

    /// prepare memory to make call
    /**
     * Expected callback input
     * 0x00 - 0x04: callback_function_sig
     * 0x04 - 0x24: msg.sender
     * 0x24 - 0x44: address(this)
     * 0x44 - 0x64: asset
     * 0x64 - 0x84: amount
     * 0x84 - 0xa4: fee
     * 0xa4 - 0xc4: offset to `data` (in this case it will always be 0x20)
     * 0xc4 - 0xe4: length of `data`
     * 0xe4 - 0x104: start of `data`
     */
    // mstore callback function sig
    0x00 mstore                                                                                     // [callback_address, flash_fee, amount, asset_]
    // mstore msg.sender
    caller 0x04 mstore                                                                              // [callback_address, flash_fee, amount, asset_]
    // mstore address(this)
    _REPAY_TO() 0x24 mstore                                                                         // [callback_address, flash_fee, amount, asset_]
    // mstore asset
    dup4 0x44 mstore                                                                                // [callback_address, flash_fee, amount, asset_]
    // mstore amount
    dup3 0x64 mstore                                                                                // [callback_address, flash_fee, amount, asset_]
    // mstore fee
    dup2 0x84 mstore                                                                                // [callback_address, flash_fee, amount, asset_]
    // mstore data offset (always 0x20 since data is the last parameter)
    0xc0 0xa4 mstore                                                                                // [callback_address, flash_fee, amount, asset_]

    // mstore length and all of data
    // use calldatacopy
    // push length to the stack (note: length + 0x20 since we are also copying length offset)
    0x20 0xa4 calldataload add                                                                      // [len, callback_address, flash_fee, amount, asset_]
    dup1                                                                                            // [len, len, callback_address, flash_fee, amount, asset_]
    0xa4 0xc4                                                                                       // [destOffset, offset, len, len, callback_address, flash_fee, amount, asset_]
    calldatacopy                                                                                    // [len, callback_address, flash_fee, amount, asset_]

    // prepare the stack for call
    0x00 0x00                                                                                       // [outOffset, outSize, len, callback_address, flash_fee, amount, asset_]
    0xc4 dup4 add                                                                                   // [inSize, outOffset, outSize, len, callback_address, flash_fee, amount, asset_]
    0x00 0x00                                                                                       // [value, inoffset, inSize, outOffset, outSize, len, callback_address, flash_fee, amount, asset_]
    dup7 gas                                                                                        // [gas, address, value, inoffset, inSize, outOffset, outSize, len, callback_address, flash_fee, amount, asset_]

    // before call, check that callback address has code deployed to it
    dup2 CONFIRM_THAT_ADDRES_HAS_CODE()                                                             // [gas, address, value, inoffset, inSize, outOffset, outSize, len, callback_address, flash_fee, amount, asset_]

    // make call
    call                                                                                            // [success, len, callback_address, flash_fee, amount, asset_]
    accept_transfer_jumpdest jumpi                                                                  // [len, callback_address, flash_fee, amount, asset_]
    0x00 0x00 revert

    // accept transfer
    accept_transfer_jumpdest:                                                                       // [len, callback_address, flash_fee, amount, asset_]
        pop dup2 dup4 add                                                                                    // [flash_fee, callback_address, flash_fee, amount, asset_]
        _ACCEPT_TRANSFER()                                                                          // [callback_address, flash_fee, amount, asset_]


    // emit Flash event
    // store unindexed params in memory
    pop                                                                                             // [flash_fee, amount, asset_]
    0x20 mstore                                                                                     // [amount, asset_]
    0x00 mstore                                                                                     // [asset_]
    __EVENT_HASH(Flash)                                                                             // [flash_event_hash, asset_]
    0x20 0x00                                                                                       // [offset, size, flash_event_hash, asset_]
    log2                                                                                            // []



    // return result of callback call
    // store the offset
    0x20 0x00 mstore                                                                                // []
    // store length in memory
    returndatasize 0x20 mstore                                                                      // []
    // copy the data into memory
    returndatasize 0x00 0x40                                                                        // [destOffset, offset, size]
    returndatacopy                                                                                  // []

    // return it
    returndatasize 0x40 add                                                                         // [length]
    0x00                                                                                            // [offset, length]
    return                                                                                                                                  
}



/// @notice Max Flash loan function implementation
/**
 * function maxFlashLoan(address asset_) external view returns(uint256)
 *
 * Input data expected
 * 0x00 - 0x04: 0x........
 * 0x04 - 0x24: address asset_
 */
#define macro MAX_FLASHLOAN() = {
    // confirm that asset_ is supported
    0x04 calldataload                                                                               // [asset_]
    IS_SUPPORTED()                                                                                  // [asset_]
    pop                                                                                             // []

    // sload reserves from storage and store it in memory
    [RESERVES] sload                                                                                // [reserves]
    0x00 mstore                                                                                     // []

    // return it
    0x20 0x00 return                                                              
}



/// @notice Flash fee function implementation
/**
 * function flashFee(address asset_) external view returns(uint256)
 *
 * Input data expected
 * 0x00 - 0x04: 0x........
 * 0x04 - 0x24: address asset_
 * 0x04 - 0x44: uint256 amount
 */
#define macro FLASH_FEE() = {
    // confirm that asset_ is supported
    0x04 calldataload                                                                               // [asset_]
    IS_SUPPORTED()                                                                                  // [asset_]
    pop                                                                                             // []

    0x24 calldataload                                                                               // [amount]
    _FLASH_FEE()                                                                                    // [flash_fee]
    0x00 mstore                                                                                     // []
    0x20 0x00 return
}




//  MODIFIERS

/// @notice reverts if caller is not owner
#define macro ONLY_OWNER() = {
    // if msg.sender is not == owner, revert with onlyowner error else jump to transfer asset to owner
    caller [OWNER] eq                                                                               // [(owner == msg.sender)]
    continue jumpi                                                                                  // []

    // revert if execution gets here
    __ERROR(OnlyOwner) 0x00 mstore                                                                  // []
    caller 0x04 mstore                                                                              // []
    [OWNER] 0x24 mstore                                                                             // []
    0x44 0x00 revert                                                                                // []

    continue:                                                                                       // []
}



/// @notice reverts if asset inputted by user to flash loan is not == asset the contract is created to flash loan
#define macro IS_SUPPORTED() = takes(1) returns(0) {
    // Input stack:            [asset_]

    // reverts if asset_ is nor equal to stored constant ASSET
    dup1 [ASSET] eq                                                                                 // [(ASSET == asset_), asset_]
    continue jumpi                                                                                  // [asset_]
    
    // reverts if execution gets here
    __ERROR(UnsupportedToken) 0x00 mstore                                                           // [asset_]
    0x04 mstore                                                                                     // []
    0x24 0x00 revert                                                                                // []

    continue:                                                                                       // [asset_]
}



// INTERNAL FUNCTIONS AND HELPERS

/// @notice returns the flash fee if amount to flash loan is <= current reserves else returns uint256.max
/// @dev if amount is <= reserves, the formula to calculate falsh amount is (amount * fee / 10_000)
#define macro _FLASH_FEE() = takes(1) returns(1) {
    // Input stack:             [amount]

    // return reserves > amount ? type(uint256).max : (amount * fee / 10_000);
    dup1                                                                                            // [amount, amount]
    [RESERVES] sload                                                                                // [reserves, amount, amount]
    gt iszero                                                                                       // [iszero(reserves > amount), amount]
    return_max jumpi                                                                                // [amount]

    // if it gets here return (amount * fee / 10_000)
    [FEE] mul                                                                                       // [(amount * fee)]
    [TEN_THOUSAND] swap1 div                                                                        // [flash_fee]
    continue jump                                                                                   // [flash_fee]

    // if it gets here, return type(uint256).max
    return_max:                                                                                     // [amount]
        pop                                                                                         // []
        [__UINT256_MAX]                                                                             // [flash_fee]

    continue:                                                                                       // [flash_fee]
}




/// @dev accepts transfer and checks that the amount expected is greater than or equal to the current reserves, else reverts
#define macro _ACCEPT_TRANSFER() = takes(1) returns(0) {
    // Input stack:             [flash_fee]
    [RESERVES] sload add                                                                            // [expected_reserves]
    GET_ASSET_BALANCE_OF_THIS()                                                                     // [currentReserves, expected_reserves]

    // sstore expected reserves in storage
    dup2 [RESERVES] sstore                                                                          // [currentReserves, expected_reserves]

    dup2 dup2                                                                                       // [currentReserves, expected_reserves, currentReserves, expected_reserves]
    lt                                                                                              // [(currentReserves < expected_reserves), currentReserves, expected_reserves]
    iszero continue jumpi                                                                           // [currentReserves, expected_reserves]

    // revert if it gets here
    __ERROR(InsufficientBalance) 0x00 mstore                                                        // [currentReserves, expected_reserves]
    0x24 mstore                                                                                     // [currentReserves]
    0x04 mstore                                                                                     // []
    0x44 0x00 revert                                                                        

    continue:                                                                                       // [currentReserves, expected_reserves]
        pop pop                                                                                     // []
}



/// @dev transfers the asset to the to address
#define macro _SERVE_LOAN() = takes(2) returns(0) {
    // Input stack:             [amount, to]

    // update reserves
    dup1                                                                                            // [amount, amount, to]
    [RESERVES] sload                                                                                // [reserves, amount, amount, to]
    sub                                                                                             // [newReserves, amount, to]
    [RESERVES] sstore                                                                               // [amount, to]

    // transfer asset to `to`
    [ASSET] swap2                                                                                   // [to, amount, token]
    SAFE_TRANSFER(0x00)                                                                             // []
}




/// @notice returns address(this)
#define macro _REPAY_TO() = {
    address
}




/// @notice safe transfers token and reverts otherwise
/// @dev same as huffmate's safe transfer but checks that address to call has code deployed to it first
#define macro SAFE_TRANSFER(mem_ptr) = takes(3) returns(0) {
    // Input stack:            [to, amount, token]
    // Output stack:           []

    dup3 CONFIRM_THAT_ADDRES_HAS_CODE()                                                             // [to, amount, token]


    continue_transfer:
        __RIGHTPAD(0xa9059cbb)                                                                      // [transfer_selector, to, amount, token]
        <mem_ptr>                                                                                   // [mem_ptr, transfer_selector, to, amount, token]
        mstore                                                                                      // [to, amount, token]

        <mem_ptr> 0x04 add                                                                          // [mem_ptr + 0x04, to, amount, token]
        mstore                                                                                      // [amount, token]
        <mem_ptr> 0x24 add                                                                          // [mem_ptr + 0x24, amount, token]
        mstore

        <mem_ptr> 0x44                                                                              // [0x44, mem_ptr, token]
        dup2 0x00                                                                                   // [0x00, mem_ptr, 0x44, mem_ptr, token]
        0x20 swap5                                                                                  // [token, 0x00, mem_ptr, 0x44, mem_ptr, 0x20]
        gas call                                                                                    // [success]

        returndatasize                                                                              // [returndatasize, success]
        iszero                                                                                      // [returndatasize == 0, success]
        <mem_ptr>                                                                                   // [offset, returndatasize == 0, success]
        mload                                                                                       // [data, returndatasize == 0, success]
        0x01 eq                                                                                     // [data == 0x01, returndatasize == 0, success]
        or                                                                                          // [data == 0x01 | returndatasize == 0, success]

        and                                                                                         // [success & (data == 0x01 | returndatasize == 0)]
        success jumpi                                                                               // []

        0x90b8ec18 0x00 mstore                                                                      // []
        0x04 0x1c revert                                                                        

        success:
}






/// @notice gets weth balance of address(this) of a token
#define macro GET_ASSET_BALANCE_OF_THIS() = takes(0) returns(1) {
    [ASSET]                                                                                         // [Asset]
    CONFIRM_THAT_ADDRES_HAS_CODE()                                                                  // []

    __RIGHTPAD(0x70a08231) 0x00 mstore                                                              // []
    address 0x04 mstore                                                                             // []
    0x20 0x00 0x24 0x00                                                                             // [in, insize, out, outsize]
    [ASSET] gas staticcall                                                                          // [success]

    iszero balanceOfCallFailed jumpi                                                                // []
    0x00 mload                                                                                      // [asset.balanceOf(address(this))]
    continue jump                                                                                   // [asset.balanceOf(address(this))]

    balanceOfCallFailed:
        0x00 0x00 revert

    continue:                                                                                       // [assset.balanceOf(address(this))]
}



/// @notice reverts if address has no code deployed to it 
#define macro CONFIRM_THAT_ADDRES_HAS_CODE() = takes(1) returns(0) {
    // Input stack:                [addr]


    // confirm that `address` is has code deployed to it else revert
    extcodesize                                                                                     // [extcodesize(addr)]
    continue jumpi                                                                                  // []
    0x00 0x00 revert                                                                    

    continue:
}